// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IRabbitConsumer is an autogenerated mock type for the IRabbitConsumer type
type IRabbitConsumer struct {
	mock.Mock
}

type IRabbitConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *IRabbitConsumer) EXPECT() *IRabbitConsumer_Expecter {
	return &IRabbitConsumer_Expecter{mock: &_m.Mock}
}

// Consume provides a mock function with given fields: queueName, handler
func (_m *IRabbitConsumer) Consume(queueName string, handler func([]byte)) error {
	ret := _m.Called(queueName, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func([]byte)) error); ok {
		r0 = rf(queueName, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRabbitConsumer_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type IRabbitConsumer_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
//   - queueName string
//   - handler func([]byte)
func (_e *IRabbitConsumer_Expecter) Consume(queueName interface{}, handler interface{}) *IRabbitConsumer_Consume_Call {
	return &IRabbitConsumer_Consume_Call{Call: _e.mock.On("Consume", queueName, handler)}
}

func (_c *IRabbitConsumer_Consume_Call) Run(run func(queueName string, handler func([]byte))) *IRabbitConsumer_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func([]byte)))
	})
	return _c
}

func (_c *IRabbitConsumer_Consume_Call) Return(_a0 error) *IRabbitConsumer_Consume_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRabbitConsumer_Consume_Call) RunAndReturn(run func(string, func([]byte)) error) *IRabbitConsumer_Consume_Call {
	_c.Call.Return(run)
	return _c
}

// NewIRabbitConsumer creates a new instance of IRabbitConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRabbitConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRabbitConsumer {
	mock := &IRabbitConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
