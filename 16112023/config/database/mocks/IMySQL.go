// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// IMySQL is an autogenerated mock type for the IMySQL type
type IMySQL struct {
	mock.Mock
}

type IMySQL_Expecter struct {
	mock *mock.Mock
}

func (_m *IMySQL) EXPECT() *IMySQL_Expecter {
	return &IMySQL_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: ctx, query, args
func (_m *IMySQL) Exec(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IMySQL_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type IMySQL_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *IMySQL_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *IMySQL_Exec_Call {
	return &IMySQL_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *IMySQL_Exec_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *IMySQL_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IMySQL_Exec_Call) Return(_a0 sql.Result, _a1 error) *IMySQL_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IMySQL_Exec_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (sql.Result, error)) *IMySQL_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields:
func (_m *IMySQL) GetDB() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// IMySQL_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type IMySQL_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
func (_e *IMySQL_Expecter) GetDB() *IMySQL_GetDB_Call {
	return &IMySQL_GetDB_Call{Call: _e.mock.On("GetDB")}
}

func (_c *IMySQL_GetDB_Call) Run(run func()) *IMySQL_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IMySQL_GetDB_Call) Return(_a0 *sql.DB) *IMySQL_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IMySQL_GetDB_Call) RunAndReturn(run func() *sql.DB) *IMySQL_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *IMySQL) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IMySQL_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type IMySQL_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IMySQL_Expecter) Ping(ctx interface{}) *IMySQL_Ping_Call {
	return &IMySQL_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *IMySQL_Ping_Call) Run(run func(ctx context.Context)) *IMySQL_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IMySQL_Ping_Call) Return(_a0 error) *IMySQL_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IMySQL_Ping_Call) RunAndReturn(run func(context.Context) error) *IMySQL_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: ctx, query, args
func (_m *IMySQL) QueryRow(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// IMySQL_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type IMySQL_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *IMySQL_Expecter) QueryRow(ctx interface{}, query interface{}, args ...interface{}) *IMySQL_QueryRow_Call {
	return &IMySQL_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *IMySQL_QueryRow_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *IMySQL_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IMySQL_QueryRow_Call) Return(_a0 *sql.Row) *IMySQL_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IMySQL_QueryRow_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *sql.Row) *IMySQL_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewIMySQL creates a new instance of IMySQL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMySQL(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMySQL {
	mock := &IMySQL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
