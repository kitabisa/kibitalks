// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	campaign "github.com/kitabisa/kibitalk/client/campaign"

	mock "github.com/stretchr/testify/mock"
)

// ICampaignService is an autogenerated mock type for the ICampaignService type
type ICampaignService struct {
	mock.Mock
}

type ICampaignService_Expecter struct {
	mock *mock.Mock
}

func (_m *ICampaignService) EXPECT() *ICampaignService_Expecter {
	return &ICampaignService_Expecter{mock: &_m.Mock}
}

// GetCampaign provides a mock function with given fields: ctx, id
func (_m *ICampaignService) GetCampaign(ctx context.Context, id uint64) (campaign.GetCampaignResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 campaign.GetCampaignResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (campaign.GetCampaignResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) campaign.GetCampaignResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(campaign.GetCampaignResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICampaignService_GetCampaign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCampaign'
type ICampaignService_GetCampaign_Call struct {
	*mock.Call
}

// GetCampaign is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *ICampaignService_Expecter) GetCampaign(ctx interface{}, id interface{}) *ICampaignService_GetCampaign_Call {
	return &ICampaignService_GetCampaign_Call{Call: _e.mock.On("GetCampaign", ctx, id)}
}

func (_c *ICampaignService_GetCampaign_Call) Run(run func(ctx context.Context, id uint64)) *ICampaignService_GetCampaign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ICampaignService_GetCampaign_Call) Return(response campaign.GetCampaignResponse, err error) *ICampaignService_GetCampaign_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *ICampaignService_GetCampaign_Call) RunAndReturn(run func(context.Context, uint64) (campaign.GetCampaignResponse, error)) *ICampaignService_GetCampaign_Call {
	_c.Call.Return(run)
	return _c
}

// NewICampaignService creates a new instance of ICampaignService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICampaignService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICampaignService {
	mock := &ICampaignService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
