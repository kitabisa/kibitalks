// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	payment "github.com/kitabisa/kibitalk/client/payment"
	mock "github.com/stretchr/testify/mock"
)

// IPaymentService is an autogenerated mock type for the IPaymentService type
type IPaymentService struct {
	mock.Mock
}

type IPaymentService_Expecter struct {
	mock *mock.Mock
}

func (_m *IPaymentService) EXPECT() *IPaymentService_Expecter {
	return &IPaymentService_Expecter{mock: &_m.Mock}
}

// CreatePayment provides a mock function with given fields: ctx, request
func (_m *IPaymentService) CreatePayment(ctx context.Context, request payment.CreatePaymentRequest) (payment.CreatePaymentResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 payment.CreatePaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payment.CreatePaymentRequest) (payment.CreatePaymentResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payment.CreatePaymentRequest) payment.CreatePaymentResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(payment.CreatePaymentResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, payment.CreatePaymentRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPaymentService_CreatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayment'
type IPaymentService_CreatePayment_Call struct {
	*mock.Call
}

// CreatePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - request payment.CreatePaymentRequest
func (_e *IPaymentService_Expecter) CreatePayment(ctx interface{}, request interface{}) *IPaymentService_CreatePayment_Call {
	return &IPaymentService_CreatePayment_Call{Call: _e.mock.On("CreatePayment", ctx, request)}
}

func (_c *IPaymentService_CreatePayment_Call) Run(run func(ctx context.Context, request payment.CreatePaymentRequest)) *IPaymentService_CreatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(payment.CreatePaymentRequest))
	})
	return _c
}

func (_c *IPaymentService_CreatePayment_Call) Return(_a0 payment.CreatePaymentResponse, _a1 error) *IPaymentService_CreatePayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IPaymentService_CreatePayment_Call) RunAndReturn(run func(context.Context, payment.CreatePaymentRequest) (payment.CreatePaymentResponse, error)) *IPaymentService_CreatePayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPaymentService creates a new instance of IPaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPaymentService {
	mock := &IPaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
